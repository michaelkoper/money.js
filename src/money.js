// Generated by CoffeeScript 2.2.4
(function() {
  /*

    Money Class

    A lighweight javascript library for handling money in different currencies.
    http://github.com/michaelkoper/money.js

    Copyright (c) 2014 Michael Koper

    Dual licensed under the MIT and GPL licenses.

    @version 0.2.2

  */
  this.Money = (function() {
    class Money {
      constructor(value, cur, options) {
        var currency;
        this.options = options || {};
        currency = typeof cur === 'object' ? cur : null;
        this.currency = currency || Money.currencies[cur] || Money.currencies[Money.defaultCurrency];
        if ((typeof value === 'string') || (value instanceof String)) {
          this.cents = Math.round(value.replace(/\,/, '.') * this.currency.factor);
        } else if ((typeof value === 'number') || (value instanceof Number)) {
          this.cents = Math.round(value);
        } else {
          this.cents = 0;
        }
      }

      toString(options) {
        var amount, amountPrefix, decimals, fixed, minus, prefixNumber, replacedNumber, toString;
        options = options || {};
        fixed = options.no_cents || (options.no_cents_if_whole && (this.cents % this.currency.factor === 0)) ? 0 : this.currency.fixed;
        amount = this.cents / this.currency.factor;
        // Make it minus if less then 0
        minus = amount < 0 ? "-" : "";
        // Make it a string and possitive
        toString = parseInt(amount = Math.abs(+amount || 0).toFixed(fixed)) + "";
        // How many numbers before the first thousands
        amountPrefix = (amountPrefix = toString.length) > 3 ? amountPrefix % 3 : 0;
        prefixNumber = amountPrefix ? toString.substr(0, amountPrefix) + this.currency.thousands : "";
        // number without prefix which need the thousands
        replacedNumber = toString.substr(amountPrefix).replace(/(\d{3})(?=\d)/g, "$1" + this.currency.thousands);
        decimals = (fixed ? this.currency.separator + Math.abs(amount - toString).toFixed(fixed).slice(2) : "");
        return minus + prefixNumber + replacedNumber + decimals;
      }

      formatted(options) {
        return this.currency.format(this.toString(options));
      }

      formattedUnambiguous(options) {
        return this.currency.unambiguousFormat(this.toString(options));
      }

      formattedWithTags(options) {
        return this.currency.formatWithTags(this.toString(options));
      }

      dup() {
        return new Money(this.cents, this.currency);
      }

      add(v) {
        return new Money(this.cents + v.toMoney(this.currency).cents, this.currency);
      }

      subtract(v) {
        return new Money(this.cents - v.toMoney(this.currency).cents, this.currency);
      }

      multiply(v) {
        return new Money(Math.round(this.cents * v), this.currency);
      }

      divide(v) {
        return new Money(Math.round(this.cents / v), this.currency);
      }

      isEqual(otherMoney) {
        return this.cents === otherMoney.cents && this.currency === otherMoney.currency;
      }

      isBiggerThan(otherMoney) {
        return this.cents > otherMoney.cents;
      }

      isBiggerOrEqualThan(otherMoney) {
        return this.cents >= otherMoney.cents;
      }

      isSmallerThan(otherMoney) {
        return this.cents < otherMoney.cents;
      }

      isSmallerOrEqualThan(otherMoney) {
        return this.cents <= otherMoney.cents;
      }

      isPositive() {
        return this.cents > 0;
      }

      isNegative() {
        return this.cents < 0;
      }

      isZero() {
        return this.cents === 0;
      }

    };

    // Default currencies
    Money.currencies = {
      'EUR': {
        identifier: 'EUR',
        fixed: 2,
        name: 'euro',
        factor: 100,
        separator: ',',
        thousands: '.',
        format: function(base) {
          return `${base} €`;
        },
        unambiguousFormat: function(base) {
          return `${base} €`;
        },
        formatWithTags: function(base) {
          return `${base} <span>€</span>`;
        }
      },
      'USD': {
        identifier: 'USD',
        fixed: 2,
        name: 'dollar',
        factor: 100,
        separator: '.',
        thousands: ',',
        format: function(base) {
          return `$${base}`;
        },
        unambiguousFormat: function(base) {
          return `$${base}`;
        },
        formatWithTags: function(base) {
          return `<span>$</span>${base}`;
        }
      },
      'GBP': {
        identifier: 'GBP',
        fixed: 2,
        name: 'British Pound',
        factor: 100,
        separator: '.',
        thousands: ',',
        format: function(base) {
          return `£${base}`;
        },
        unambiguousFormat: function(base) {
          return `£${base}`;
        },
        formatWithTags: function(base) {
          return `<span>£</span>${base}`;
        }
      },
      'AUD': {
        identifier: 'AUD',
        fixed: 2,
        name: 'Australian Dollar',
        factor: 100,
        separator: '.',
        thousands: ',',
        format: function(base) {
          return `$${base}`;
        },
        unambiguousFormat: function(base) {
          return `AU$${base}`;
        },
        formatWithTags: function(base) {
          return `<span>AU$</span>${base}`;
        }
      }
    };

    Money.defaultCurrency = 'EUR';

    return Money;

  }).call(this);

  
  // Numbers are assumed to be in human format, not cents.

  Number.prototype.toMoney = function(cur) {
    var currency;
    currency = Money.currencies[cur] || Money.currencies[Money.defaultCurrency];
    return new Money(this, cur);
  };

  String.prototype.toMoney = function(cur) {
    return new Money(this, cur);
  };

}).call(this);
