// Generated by CoffeeScript 1.3.3
/*

Money Class

Make handling money much easier and most importantly avoid rounding
errors.
*/

var Money;

Money = (function() {

  Money.currencies = {
    'EUR': {
      fixed: 2,
      name: 'euro',
      factor: 100,
      separator: ',',
      thousands: '.',
      format: function(base) {
        return "" + base + " â‚¬";
      }
    },
    'CLP': {
      fixed: 0,
      name: 'pesos',
      factor: 1,
      separator: ',',
      thousands: '.',
      format: function(base) {
        return "$" + base;
      }
    },
    'PEN': {
      fixed: 2,
      name: 'nuevo soles',
      factor: 100,
      separator: ',',
      thousands: '.',
      format: function(base) {
        return "S/." + base;
      }
    },
    'USD': {
      fixed: 2,
      name: 'dollar',
      factor: 100,
      separator: '.',
      thousands: ',',
      format: function(base) {
        return "$" + base;
      }
    },
    'MXN': {
      fixed: 2,
      name: 'mexican pesos',
      factor: 100,
      separator: '.',
      thousands: ',',
      format: function(base) {
        return "$" + base;
      }
    }
  };

  Money.defaultCurrency = 'EUR';

  function Money(value, cur, options) {
    this.options = options || {};
    if (cur instanceof Object) {
      this.currency = cur;
    } else {
      this.currency = Money.currencies[cur] || Money.currencies[Money.defaultCurrency];
    }
    if (value instanceof Money) {
      this.cents = value.cents;
      if (this.currency.name !== value.currency.name) {
        this.currency = value.currency;
      }
    } else if ((typeof value === 'string') || (value instanceof String)) {
      this.cents = Math.round(value.replace(/\,/, '.') * this.currency.factor);
    } else if ((typeof value === 'number') || (value instanceof Number)) {
      this.cents = Math.round(value);
    } else {
      this.cents = 0;
    }
  }

  Money.prototype.toString = function() {
    var fixed;
    fixed = this.currency.fixed;
    if (this.options.no_cents) {
      fixed = 0;
    }
    return (this.cents / this.currency.factor).toFixed(fixed).replace(/\./, this.currency.separator);
  };

  Money.prototype.formatted = function(options) {
    return this.currency.format(this.toString());
  };

  Money.prototype.dup = function() {
    return new Money(this, this.currency);
  };

  Money.prototype.add = function(v) {
    return new Money(this.cents + v.toMoney().cents, this.currency);
  };

  Money.prototype.subtract = function(v) {
    return new Money(this.cents - v.toMoney().cents, this.currency);
  };

  Money.prototype.multiply = function(v) {
    return new Money(Math.round(this.cents * v), this.currency);
  };

  Money.prototype.divide = function(v) {
    return new Money(Math.round(this.cents / v), this.currency);
  };

  Money.prototype.toMoney = function(cur) {
    return this;
  };

  return Money;

})();

Number.prototype.toMoney = function(cur) {
  var currency;
  currency = Money.currencies[cur] || Money.currencies[Money.defaultCurrency];
  return new Money(this * currency.factor, cur);
};

String.prototype.toMoney = function(cur) {
  return new Money(this, cur);
};

(typeof exports !== "undefined" && exports !== null ? exports : this).Money = Money;
